<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:osgi="http://www.eclipse.org/gemini/blueprint/schema/blueprint"
       xmlns:util="http://www.springframework.org/schema/util"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
                        http://www.eclipse.org/gemini/blueprint/schema/blueprint http://www.eclipse.org/gemini/blueprint/schema/blueprint/gemini-blueprint.xsd
                        http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.0.xsd">

    <osgi:reference id="ExternalProviderIdentifierMappingService" interface="org.jahia.modules.external.IdentifierMappingService"/>

    <bean id="ModulesDataSourcePrototype" class="org.jahia.modules.external.modules.ModulesDataSource"
          scope="prototype">
        <property name="supportedNodeTypes">
            <set>
                <value>jnt:nodeTypeFolder</value>
                <value>jnt:templateTypeFolder</value>
                <value>jnt:cssFolder</value>
                <value>jnt:cssFile</value>
                <value>jnt:javascriptFolder</value>
                <value>jnt:javascriptFile</value>
                <value>jnt:viewFile</value>
                <value>jnt:definitionFile</value>
                <value>nt:nodeType</value>
                <value>jnt:resourceBundleFolder</value>
                <value>jnt:namespaceDefinition</value>
            </set>
        </property>
        <property name="folderTypeMapping">
            <util:map key-type="java.lang.String" value-type="java.lang.String">
                <entry key="css" value="jnt:cssFolder"/>
                <entry key="javascript" value="jnt:javascriptFolder"/>
                <entry key="resources" value="jnt:resourceBundleFolder"/>
                <entry key="META-INF" value="jnt:metaInfFolder"/>
            </util:map>
        </property>
        <property name="fileTypeMapping">
            <util:map key-type="java.lang.String" value-type="java.lang.String">
                <entry key="cnd" value="jnt:definitionFile"/>
                <entry key="css" value="jnt:cssFile"/>
                <entry key="js" value="jnt:javascriptFile"/>
                <entry key="jsp" value="jnt:viewFile"/>
                <entry key="properties" value="jnt:resourceBundleFile"/>
                <!-- we will do an additional check in the ModulesDataSource if the parent is the jnt:resourceBundleFolder -->
            </util:map>
        </property>
    </bean>

    <bean class="org.jahia.modules.external.modules.osgi.ModulesSourceSpringInitializer" factory-method="getInstance">
        <property name="jcrStoreService" ref="JCRStoreService"/>
    </bean>

    <bean class="org.jahia.modules.external.modules.ModulesListener" factory-method="getInstance"/>
    
    <bean class="org.jahia.modules.external.MountPointListener">
        <property name="identifierMappingService" ref="ExternalProviderIdentifierMappingService"/>
    </bean>

    <bean parent="jobSchedulingBean">
        <property name="ramJob" value="true"/>
        <property name="jobDetail">
            <bean class="org.springframework.scheduling.quartz.JobDetailBean">
                <property name="name" value="ModulesAutoExport" />
                <property name="jobClass" value="org.jahia.modules.external.modules.ModulesExportJob" />
                <property name="group" value="Studio" />
                <property name="jobDataAsMap">
                    <map>
                    </map>
                </property>
            </bean>
        </property>
        <property name="trigger">
            <bean class="org.quartz.CronTrigger">
                <property name="name" value="StudioExportJobTrigger"/>
                <property name="cronExpression" value="0/5 * * * * ?"/><!-- execute every hour -->
            </bean>
        </property>
    </bean>
</beans>